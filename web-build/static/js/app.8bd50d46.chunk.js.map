{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","screens/components/QrReader.tsx","screens/TabOneScreen.tsx","screens/components/QrCamera.tsx","screens/TabTwoScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","MonoText","fontFamily","EditScreenInfo","path","styles","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","WebBrowser","StyleSheet","create","alignItems","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","fontSize","lineHeight","textAlign","marginTop","paddingVertical","ModalScreen","container","title","separator","StatusBar","Platform","OS","flex","justifyContent","fontWeight","height","width","NotFoundScreen","navigation","replace","link","linkText","padding","QrTicket","useState","hasPermission","setHasPermission","scanned","setScanned","useEffect","a","async","BarCodeScanner","requestPermissionsAsync","status","onBarCodeScanned","undefined","type","data","alert","camera","Button","flexDirection","TabOneScreen","QrCamera","Camera","Constants","Type","back","setType","buttonContainer","button","front","margin","alignSelf","TabTwoScreen","category","linking","prefixes","Linking","config","screens","Root","TabOne","TabTwo","Modal","NotFound","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","name","component","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","initialRouteName","tabBarActiveTintColor","tabBarIcon","TabBarIcon","headerRight","Pressable","navigate","opacity","pressed","FontAwesome","size","marginRight","marginBottom","App","isLoadingComplete","React","setLoadingComplete","SplashScreen","Font","font","require","console","warn","useCachedResources","eva","module","exports"],"mappings":"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","file":"static/js/app.8bd50d46.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StatusBar } from 'expo-status-bar';\nimport * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Ticket info</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import React, { useState, useEffect } from 'react';\r\nimport { Text, View, StyleSheet, Button } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\n\r\nexport default function QrTicket() {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  const handleBarCodeScanned = ({ type, data }) => {\r\n    setScanned(true);\r\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n  };\r\n\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n        style={styles.camera}\r\n      />\r\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n  },\r\n  camera: {\r\n    flex: 1,\r\n    width: 200\r\n  }\r\n});\r\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\nimport QrTicket from './components/QrReader';\n\nexport default function TabOneScreen({ navigation }: RootTabScreenProps<'TabOne'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Qr Scanner</Text>\n      <QrTicket></QrTicket>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport { Camera } from 'expo-camera';\n\nexport default function QrCamera() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [type, setType] = useState(Camera.Constants.Type.back);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await Camera.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n    \n  }, []);\n\n  if (hasPermission === null) {\n    return <View />;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n  return (\n    <View style={styles.container}>\n      <Camera style={styles.camera} type={type}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity\n            style={styles.button}\n            onPress={() => {\n              setType(\n                type === Camera.Constants.Type.back\n                  ? Camera.Constants.Type.front\n                  : Camera.Constants.Type.back\n              );\n            }}>\n            <Text style={styles.text}> Flip </Text>\n          </TouchableOpacity>\n        </View>\n      </Camera>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20,\n  },\n  button: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 18,\n    color: 'white',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { View } from '../components/Themed';\nimport QrCamera from './components/QrCamera';\nimport { Layout, Text } from '@ui-kitten/components';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Database update</Text>\n      <QrCamera></QrCamera>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text category='h1'>HOME</Text>\n      </Layout>\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { FontAwesome } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport ModalScreen from '../screens/ModalScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} options={{ headerShown: false }} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n      }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneScreen}\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\n          title: 'Scan QR',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n          headerRight: () => (\n            <Pressable\n              onPress={() => navigation.navigate('Modal')}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}>\n              <FontAwesome\n                name=\"info-circle\"\n                size={25}\n                color={Colors[colorScheme].text}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoScreen}\n        options={{\n          title: 'Edit Users',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>['name'];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\nimport * as eva from '@eva-design/eva';\nimport { ApplicationProvider, Layout, Text } from '@ui-kitten/components';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <ApplicationProvider {...eva} theme={eva.light}>\n        <SafeAreaProvider>\n          <Navigation colorScheme={colorScheme} />\n          <StatusBar />\n        </SafeAreaProvider>\n      </ApplicationProvider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}